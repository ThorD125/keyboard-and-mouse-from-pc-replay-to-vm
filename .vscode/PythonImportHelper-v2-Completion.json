[
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "pyautogui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyautogui",
        "description": "pyautogui",
        "detail": "pyautogui",
        "documentation": {}
    },
    {
        "label": "ImageGrab",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageGrab",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "pygetwindow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygetwindow",
        "description": "pygetwindow",
        "detail": "pygetwindow",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keyboard",
        "description": "keyboard",
        "detail": "keyboard",
        "documentation": {}
    },
    {
        "label": "connect_to_server",
        "importPath": "client_library",
        "description": "client_library",
        "isExtraImport": true,
        "detail": "client_library",
        "documentation": {}
    },
    {
        "label": "create_server_socket",
        "importPath": "server_library",
        "description": "server_library",
        "isExtraImport": true,
        "detail": "server_library",
        "documentation": {}
    },
    {
        "label": "SERVER_HOST",
        "kind": 5,
        "importPath": "client.client pic",
        "description": "client.client pic",
        "peekOfCode": "SERVER_HOST = '127.0.0.1'  # Replace with the server's IP address or hostname\nSERVER_PORT = 12345\n# Create a socket object\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# Connect to the server\nclient_socket.connect((SERVER_HOST, SERVER_PORT))\n# Send the picture data to the server\nwith open(\"clientscreenshot.png\", \"rb\") as file:\n    data = file.read(1024)\n    while data:",
        "detail": "client.client pic",
        "documentation": {}
    },
    {
        "label": "SERVER_PORT",
        "kind": 5,
        "importPath": "client.client pic",
        "description": "client.client pic",
        "peekOfCode": "SERVER_PORT = 12345\n# Create a socket object\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# Connect to the server\nclient_socket.connect((SERVER_HOST, SERVER_PORT))\n# Send the picture data to the server\nwith open(\"clientscreenshot.png\", \"rb\") as file:\n    data = file.read(1024)\n    while data:\n        client_socket.send(data)",
        "detail": "client.client pic",
        "documentation": {}
    },
    {
        "label": "client_socket",
        "kind": 5,
        "importPath": "client.client pic",
        "description": "client.client pic",
        "peekOfCode": "client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# Connect to the server\nclient_socket.connect((SERVER_HOST, SERVER_PORT))\n# Send the picture data to the server\nwith open(\"clientscreenshot.png\", \"rb\") as file:\n    data = file.read(1024)\n    while data:\n        client_socket.send(data)\n        data = file.read(1024)\nprint(\"[+] Picture sent to the server.\")",
        "detail": "client.client pic",
        "documentation": {}
    },
    {
        "label": "app_window",
        "kind": 5,
        "importPath": "client.client screenshot",
        "description": "client.client screenshot",
        "peekOfCode": "app_window = pyautogui.getWindowsWithTitle('Warframe')[0]\n# Get the coordinates of the application window\nleft, top, right, bottom = app_window.left, app_window.top, app_window.right, app_window.bottom\n# Capture the screenshot\nscreenshot = ImageGrab.grab(bbox=(left, top, right, bottom))\nnew_width = screenshot.width // 2\nnew_height = screenshot.height // 2\nresized_screenshot = screenshot.resize((new_width, new_height))\n# Replace 'screenshot.png' with the desired file name and format\n# screenshot.save('screenshot.png')",
        "detail": "client.client screenshot",
        "documentation": {}
    },
    {
        "label": "screenshot",
        "kind": 5,
        "importPath": "client.client screenshot",
        "description": "client.client screenshot",
        "peekOfCode": "screenshot = ImageGrab.grab(bbox=(left, top, right, bottom))\nnew_width = screenshot.width // 2\nnew_height = screenshot.height // 2\nresized_screenshot = screenshot.resize((new_width, new_height))\n# Replace 'screenshot.png' with the desired file name and format\n# screenshot.save('screenshot.png')\nresized_screenshot.save('screenshot.png')",
        "detail": "client.client screenshot",
        "documentation": {}
    },
    {
        "label": "new_width",
        "kind": 5,
        "importPath": "client.client screenshot",
        "description": "client.client screenshot",
        "peekOfCode": "new_width = screenshot.width // 2\nnew_height = screenshot.height // 2\nresized_screenshot = screenshot.resize((new_width, new_height))\n# Replace 'screenshot.png' with the desired file name and format\n# screenshot.save('screenshot.png')\nresized_screenshot.save('screenshot.png')",
        "detail": "client.client screenshot",
        "documentation": {}
    },
    {
        "label": "new_height",
        "kind": 5,
        "importPath": "client.client screenshot",
        "description": "client.client screenshot",
        "peekOfCode": "new_height = screenshot.height // 2\nresized_screenshot = screenshot.resize((new_width, new_height))\n# Replace 'screenshot.png' with the desired file name and format\n# screenshot.save('screenshot.png')\nresized_screenshot.save('screenshot.png')",
        "detail": "client.client screenshot",
        "documentation": {}
    },
    {
        "label": "resized_screenshot",
        "kind": 5,
        "importPath": "client.client screenshot",
        "description": "client.client screenshot",
        "peekOfCode": "resized_screenshot = screenshot.resize((new_width, new_height))\n# Replace 'screenshot.png' with the desired file name and format\n# screenshot.save('screenshot.png')\nresized_screenshot.save('screenshot.png')",
        "detail": "client.client screenshot",
        "documentation": {}
    },
    {
        "label": "SERVER_HOST",
        "kind": 5,
        "importPath": "server.server pic",
        "description": "server.server pic",
        "peekOfCode": "SERVER_HOST = '127.0.0.1'  # Listen on all available interfaces\nSERVER_PORT = 12345\n# Create a socket object\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# Bind the server socket to the address and port\nserver_socket.bind((SERVER_HOST, SERVER_PORT))\n# Listen for incoming connections\nserver_socket.listen(5)\nprint(f\"[*] Listening on {SERVER_HOST}:{SERVER_PORT}\")\n# Accept a connection from a client",
        "detail": "server.server pic",
        "documentation": {}
    },
    {
        "label": "SERVER_PORT",
        "kind": 5,
        "importPath": "server.server pic",
        "description": "server.server pic",
        "peekOfCode": "SERVER_PORT = 12345\n# Create a socket object\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# Bind the server socket to the address and port\nserver_socket.bind((SERVER_HOST, SERVER_PORT))\n# Listen for incoming connections\nserver_socket.listen(5)\nprint(f\"[*] Listening on {SERVER_HOST}:{SERVER_PORT}\")\n# Accept a connection from a client\nclient_socket, client_address = server_socket.accept()",
        "detail": "server.server pic",
        "documentation": {}
    },
    {
        "label": "server_socket",
        "kind": 5,
        "importPath": "server.server pic",
        "description": "server.server pic",
        "peekOfCode": "server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# Bind the server socket to the address and port\nserver_socket.bind((SERVER_HOST, SERVER_PORT))\n# Listen for incoming connections\nserver_socket.listen(5)\nprint(f\"[*] Listening on {SERVER_HOST}:{SERVER_PORT}\")\n# Accept a connection from a client\nclient_socket, client_address = server_socket.accept()\nprint(f\"[*] Accepted connection from {client_address[0]}:{client_address[1]}\")\n# Receive the picture data from the client and save it to a file",
        "detail": "server.server pic",
        "documentation": {}
    },
    {
        "label": "press",
        "kind": 2,
        "importPath": "server.server send key x",
        "description": "server.server send key x",
        "peekOfCode": "def press(button):\n    keyboard.press_and_release(button)\n    time.sleep(0.3)\n# Find the window by its title\nwindow = gw.getWindowsWithTitle(\"Warframe\")[0]\n# Activate the window\nwindow.activate()\n# Get the screen size\nscreen_width, screen_height = pyautogui.size()\n# Calculate the center coordinates",
        "detail": "server.server send key x",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "server.server send key x",
        "description": "server.server send key x",
        "peekOfCode": "window = gw.getWindowsWithTitle(\"Warframe\")[0]\n# Activate the window\nwindow.activate()\n# Get the screen size\nscreen_width, screen_height = pyautogui.size()\n# Calculate the center coordinates\ncenter_x = screen_width // 2\ncenter_y = screen_height // 2\n# Click at the center of the screen\ntime.sleep(1)",
        "detail": "server.server send key x",
        "documentation": {}
    },
    {
        "label": "center_x",
        "kind": 5,
        "importPath": "server.server send key x",
        "description": "server.server send key x",
        "peekOfCode": "center_x = screen_width // 2\ncenter_y = screen_height // 2\n# Click at the center of the screen\ntime.sleep(1)\npyautogui.click(center_x, center_y)\ntime.sleep(10)\npress('t')\npress('x')\nprint(\"done\")",
        "detail": "server.server send key x",
        "documentation": {}
    },
    {
        "label": "center_y",
        "kind": 5,
        "importPath": "server.server send key x",
        "description": "server.server send key x",
        "peekOfCode": "center_y = screen_height // 2\n# Click at the center of the screen\ntime.sleep(1)\npyautogui.click(center_x, center_y)\ntime.sleep(10)\npress('t')\npress('x')\nprint(\"done\")",
        "detail": "server.server send key x",
        "documentation": {}
    },
    {
        "label": "press",
        "kind": 2,
        "importPath": "server.server send key",
        "description": "server.server send key",
        "peekOfCode": "def press(button):\n    keyboard.press_and_release(button)\n    time.sleep(0.3)\n# Find the window by its title\nwindow = gw.getWindowsWithTitle(\"Warframe\")[0]\n# Activate the window\nwindow.activate()\n# Get the screen size\nscreen_width, screen_height = pyautogui.size()\n# Calculate the center coordinates",
        "detail": "server.server send key",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "server.server send key",
        "description": "server.server send key",
        "peekOfCode": "window = gw.getWindowsWithTitle(\"Warframe\")[0]\n# Activate the window\nwindow.activate()\n# Get the screen size\nscreen_width, screen_height = pyautogui.size()\n# Calculate the center coordinates\ncenter_x = screen_width // 2\ncenter_y = screen_height // 2\n# Click at the center of the screen\ntime.sleep(1)",
        "detail": "server.server send key",
        "documentation": {}
    },
    {
        "label": "center_x",
        "kind": 5,
        "importPath": "server.server send key",
        "description": "server.server send key",
        "peekOfCode": "center_x = screen_width // 2\ncenter_y = screen_height // 2\n# Click at the center of the screen\ntime.sleep(1)\npyautogui.click(center_x, center_y)\ntime.sleep(1)\npress('x')\nprint(\"done\")",
        "detail": "server.server send key",
        "documentation": {}
    },
    {
        "label": "center_y",
        "kind": 5,
        "importPath": "server.server send key",
        "description": "server.server send key",
        "peekOfCode": "center_y = screen_height // 2\n# Click at the center of the screen\ntime.sleep(1)\npyautogui.click(center_x, center_y)\ntime.sleep(1)\npress('x')\nprint(\"done\")",
        "detail": "server.server send key",
        "documentation": {}
    },
    {
        "label": "press",
        "kind": 2,
        "importPath": "server.server send move key x",
        "description": "server.server send move key x",
        "peekOfCode": "def press(button):\n    keyboard.press(button)\n    time.sleep(0.3)\ndef release(button):\n    keyboard.release(button)\n    time.sleep(0.3)\n# Find the window by its title\nwindow = gw.getWindowsWithTitle(\"Warframe\")[0]\n# Activate the window\nwindow.activate()",
        "detail": "server.server send move key x",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 2,
        "importPath": "server.server send move key x",
        "description": "server.server send move key x",
        "peekOfCode": "def release(button):\n    keyboard.release(button)\n    time.sleep(0.3)\n# Find the window by its title\nwindow = gw.getWindowsWithTitle(\"Warframe\")[0]\n# Activate the window\nwindow.activate()\n# Get the screen size\nscreen_width, screen_height = pyautogui.size()\n# Calculate the center coordinates",
        "detail": "server.server send move key x",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "server.server send move key x",
        "description": "server.server send move key x",
        "peekOfCode": "window = gw.getWindowsWithTitle(\"Warframe\")[0]\n# Activate the window\nwindow.activate()\n# Get the screen size\nscreen_width, screen_height = pyautogui.size()\n# Calculate the center coordinates\ncenter_x = screen_width // 2\ncenter_y = screen_height // 2\n# Click at the center of the screen\ntime.sleep(1)",
        "detail": "server.server send move key x",
        "documentation": {}
    },
    {
        "label": "center_x",
        "kind": 5,
        "importPath": "server.server send move key x",
        "description": "server.server send move key x",
        "peekOfCode": "center_x = screen_width // 2\ncenter_y = screen_height // 2\n# Click at the center of the screen\ntime.sleep(1)\npyautogui.click(center_x, center_y)\n# time.sleep(1)\npress('w')\ni = 1\nwhile i < 10:\n    press('w')",
        "detail": "server.server send move key x",
        "documentation": {}
    },
    {
        "label": "center_y",
        "kind": 5,
        "importPath": "server.server send move key x",
        "description": "server.server send move key x",
        "peekOfCode": "center_y = screen_height // 2\n# Click at the center of the screen\ntime.sleep(1)\npyautogui.click(center_x, center_y)\n# time.sleep(1)\npress('w')\ni = 1\nwhile i < 10:\n    press('w')\n    i += 1",
        "detail": "server.server send move key x",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "server.server send move key x",
        "description": "server.server send move key x",
        "peekOfCode": "i = 1\nwhile i < 10:\n    press('w')\n    i += 1\nrelease('w')\nprint(\"done\")",
        "detail": "server.server send move key x",
        "documentation": {}
    },
    {
        "label": "press",
        "kind": 2,
        "importPath": "server.server together",
        "description": "server.server together",
        "peekOfCode": "def press(button):\n    keyboard.press_and_release(button)\n    time.sleep(0.3)\n# Create a socket object\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# Bind the socket to a specific address and port\nhost = '192.168.32.156'  # Loopback address for localhost\nport = 12345  # You can use any available port\nserver_socket.bind((host, port))\n# Find the window by its title",
        "detail": "server.server together",
        "documentation": {}
    },
    {
        "label": "server_socket",
        "kind": 5,
        "importPath": "server.server together",
        "description": "server.server together",
        "peekOfCode": "server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# Bind the socket to a specific address and port\nhost = '192.168.32.156'  # Loopback address for localhost\nport = 12345  # You can use any available port\nserver_socket.bind((host, port))\n# Find the window by its title\nwindow = gw.getWindowsWithTitle(\"Warframe\")[0]\n# window = gw.getWindowsWithTitle(\"Notepad\")[0]\n# Activate the window\nwindow.activate()",
        "detail": "server.server together",
        "documentation": {}
    },
    {
        "label": "host",
        "kind": 5,
        "importPath": "server.server together",
        "description": "server.server together",
        "peekOfCode": "host = '192.168.32.156'  # Loopback address for localhost\nport = 12345  # You can use any available port\nserver_socket.bind((host, port))\n# Find the window by its title\nwindow = gw.getWindowsWithTitle(\"Warframe\")[0]\n# window = gw.getWindowsWithTitle(\"Notepad\")[0]\n# Activate the window\nwindow.activate()\n# Get the screen size\nscreen_width, screen_height = pyautogui.size()",
        "detail": "server.server together",
        "documentation": {}
    },
    {
        "label": "port",
        "kind": 5,
        "importPath": "server.server together",
        "description": "server.server together",
        "peekOfCode": "port = 12345  # You can use any available port\nserver_socket.bind((host, port))\n# Find the window by its title\nwindow = gw.getWindowsWithTitle(\"Warframe\")[0]\n# window = gw.getWindowsWithTitle(\"Notepad\")[0]\n# Activate the window\nwindow.activate()\n# Get the screen size\nscreen_width, screen_height = pyautogui.size()\n# Calculate the center coordinates",
        "detail": "server.server together",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "server.server together",
        "description": "server.server together",
        "peekOfCode": "window = gw.getWindowsWithTitle(\"Warframe\")[0]\n# window = gw.getWindowsWithTitle(\"Notepad\")[0]\n# Activate the window\nwindow.activate()\n# Get the screen size\nscreen_width, screen_height = pyautogui.size()\n# Calculate the center coordinates\ncenter_x = screen_width // 2\ncenter_y = screen_height // 2\n# Click at the center of the screen",
        "detail": "server.server together",
        "documentation": {}
    },
    {
        "label": "center_x",
        "kind": 5,
        "importPath": "server.server together",
        "description": "server.server together",
        "peekOfCode": "center_x = screen_width // 2\ncenter_y = screen_height // 2\n# Click at the center of the screen\ntime.sleep(1)\npyautogui.click(center_x, center_y)\ntime.sleep(1)\n# press('t')\n# Listen for incoming connections\nserver_socket.listen(5)\nprint(f\"Server listening on {host}:{port}\")",
        "detail": "server.server together",
        "documentation": {}
    },
    {
        "label": "center_y",
        "kind": 5,
        "importPath": "server.server together",
        "description": "server.server together",
        "peekOfCode": "center_y = screen_height // 2\n# Click at the center of the screen\ntime.sleep(1)\npyautogui.click(center_x, center_y)\ntime.sleep(1)\n# press('t')\n# Listen for incoming connections\nserver_socket.listen(5)\nprint(f\"Server listening on {host}:{port}\")\n# Accept a connection from a client",
        "detail": "server.server together",
        "documentation": {}
    },
    {
        "label": "client_socket",
        "kind": 5,
        "importPath": "client",
        "description": "client",
        "peekOfCode": "client_socket = connect_to_server(\"127.0.0.1\", 12345)\nprevious_state = False\nwhile True:\n    current_state = keyboard.is_pressed(\"x\")\n    if current_state != previous_state:\n        if current_state:\n            message = \"press:x\"\n            client_socket.send(message.encode('utf-8'))\n        else:\n            message = \"release:x\"",
        "detail": "client",
        "documentation": {}
    },
    {
        "label": "previous_state",
        "kind": 5,
        "importPath": "client",
        "description": "client",
        "peekOfCode": "previous_state = False\nwhile True:\n    current_state = keyboard.is_pressed(\"x\")\n    if current_state != previous_state:\n        if current_state:\n            message = \"press:x\"\n            client_socket.send(message.encode('utf-8'))\n        else:\n            message = \"release:x\"\n            client_socket.send(message.encode('utf-8'))",
        "detail": "client",
        "documentation": {}
    },
    {
        "label": "take_screenshot",
        "kind": 2,
        "importPath": "client_library",
        "description": "client_library",
        "peekOfCode": "def take_screenshot(nameapp, namepic):\n    app_window = pyautogui.getWindowsWithTitle(nameapp)[0]\n    left, top, right, bottom = app_window.left, app_window.top, app_window.right, app_window.bottom\n    screenshot = ImageGrab.grab(bbox=(left, top, right, bottom))\n    new_width = screenshot.width // 2\n    new_height = screenshot.height // 2\n    resized_screenshot = screenshot.resize((new_width, new_height))\n    resized_screenshot.save(namepic)\ndef connect_to_server(ip, port):\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",
        "detail": "client_library",
        "documentation": {}
    },
    {
        "label": "connect_to_server",
        "kind": 2,
        "importPath": "client_library",
        "description": "client_library",
        "peekOfCode": "def connect_to_server(ip, port):\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_address = (ip, port)\n    client_socket.connect(server_address)\n    return client_socket",
        "detail": "client_library",
        "documentation": {}
    },
    {
        "label": "server_socket",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "server_socket = create_server_socket('127.0.0.1', 12345)\nclient_socket, client_address = server_socket.accept()\nwhile True:\n    data = client_socket.recv(1024).decode('utf-8')\n    if not data:\n        break  \n    print(f\"Received: {data}\")\nclient_socket.close()\nserver_socket.close()",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "create_server_socket",
        "kind": 2,
        "importPath": "server_library",
        "description": "server_library",
        "peekOfCode": "def create_server_socket(host, port):\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((host, port))\n    server_socket.listen(5)\n    return server_socket",
        "detail": "server_library",
        "documentation": {}
    }
]