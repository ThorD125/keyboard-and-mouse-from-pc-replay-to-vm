[
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "pyautogui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyautogui",
        "description": "pyautogui",
        "detail": "pyautogui",
        "documentation": {}
    },
    {
        "label": "ImageGrab",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageGrab",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "pygetwindow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygetwindow",
        "description": "pygetwindow",
        "detail": "pygetwindow",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keyboard",
        "description": "keyboard",
        "detail": "keyboard",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "client_library",
        "description": "client_library",
        "isExtraImport": true,
        "detail": "client_library",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "server_library",
        "description": "server_library",
        "isExtraImport": true,
        "detail": "server_library",
        "documentation": {}
    },
    {
        "label": "SERVER_HOST",
        "kind": 5,
        "importPath": "client.client screenpic",
        "description": "client.client screenpic",
        "peekOfCode": "SERVER_HOST = '127.0.0.1'\nSERVER_PORT = 12345\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect((SERVER_HOST, SERVER_PORT))\napp_window = pyautogui.getWindowsWithTitle('Notepad')[0]\napp_window.activate()\ntime.sleep(0.1)\nleft, top, right, bottom = app_window.left, app_window.top, app_window.right, app_window.bottom\nscreenshot = ImageGrab.grab(bbox=(left, top, right, bottom))\nnew_width = screenshot.width // 2",
        "detail": "client.client screenpic",
        "documentation": {}
    },
    {
        "label": "SERVER_PORT",
        "kind": 5,
        "importPath": "client.client screenpic",
        "description": "client.client screenpic",
        "peekOfCode": "SERVER_PORT = 12345\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect((SERVER_HOST, SERVER_PORT))\napp_window = pyautogui.getWindowsWithTitle('Notepad')[0]\napp_window.activate()\ntime.sleep(0.1)\nleft, top, right, bottom = app_window.left, app_window.top, app_window.right, app_window.bottom\nscreenshot = ImageGrab.grab(bbox=(left, top, right, bottom))\nnew_width = screenshot.width // 2\nnew_height = screenshot.height // 2",
        "detail": "client.client screenpic",
        "documentation": {}
    },
    {
        "label": "client_socket",
        "kind": 5,
        "importPath": "client.client screenpic",
        "description": "client.client screenpic",
        "peekOfCode": "client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect((SERVER_HOST, SERVER_PORT))\napp_window = pyautogui.getWindowsWithTitle('Notepad')[0]\napp_window.activate()\ntime.sleep(0.1)\nleft, top, right, bottom = app_window.left, app_window.top, app_window.right, app_window.bottom\nscreenshot = ImageGrab.grab(bbox=(left, top, right, bottom))\nnew_width = screenshot.width // 2\nnew_height = screenshot.height // 2\nresized_screenshot = screenshot.resize((new_width, new_height))",
        "detail": "client.client screenpic",
        "documentation": {}
    },
    {
        "label": "app_window",
        "kind": 5,
        "importPath": "client.client screenpic",
        "description": "client.client screenpic",
        "peekOfCode": "app_window = pyautogui.getWindowsWithTitle('Notepad')[0]\napp_window.activate()\ntime.sleep(0.1)\nleft, top, right, bottom = app_window.left, app_window.top, app_window.right, app_window.bottom\nscreenshot = ImageGrab.grab(bbox=(left, top, right, bottom))\nnew_width = screenshot.width // 2\nnew_height = screenshot.height // 2\nresized_screenshot = screenshot.resize((new_width, new_height))\nimage_stream = io.BytesIO()\nresized_screenshot.save(image_stream, format='PNG')",
        "detail": "client.client screenpic",
        "documentation": {}
    },
    {
        "label": "screenshot",
        "kind": 5,
        "importPath": "client.client screenpic",
        "description": "client.client screenpic",
        "peekOfCode": "screenshot = ImageGrab.grab(bbox=(left, top, right, bottom))\nnew_width = screenshot.width // 2\nnew_height = screenshot.height // 2\nresized_screenshot = screenshot.resize((new_width, new_height))\nimage_stream = io.BytesIO()\nresized_screenshot.save(image_stream, format='PNG')\nimage_data = image_stream.getvalue()\nclient_socket.send(image_data)\nprint(\"[+] Picture sent to the server.\")\nclient_socket.close()",
        "detail": "client.client screenpic",
        "documentation": {}
    },
    {
        "label": "new_width",
        "kind": 5,
        "importPath": "client.client screenpic",
        "description": "client.client screenpic",
        "peekOfCode": "new_width = screenshot.width // 2\nnew_height = screenshot.height // 2\nresized_screenshot = screenshot.resize((new_width, new_height))\nimage_stream = io.BytesIO()\nresized_screenshot.save(image_stream, format='PNG')\nimage_data = image_stream.getvalue()\nclient_socket.send(image_data)\nprint(\"[+] Picture sent to the server.\")\nclient_socket.close()",
        "detail": "client.client screenpic",
        "documentation": {}
    },
    {
        "label": "new_height",
        "kind": 5,
        "importPath": "client.client screenpic",
        "description": "client.client screenpic",
        "peekOfCode": "new_height = screenshot.height // 2\nresized_screenshot = screenshot.resize((new_width, new_height))\nimage_stream = io.BytesIO()\nresized_screenshot.save(image_stream, format='PNG')\nimage_data = image_stream.getvalue()\nclient_socket.send(image_data)\nprint(\"[+] Picture sent to the server.\")\nclient_socket.close()",
        "detail": "client.client screenpic",
        "documentation": {}
    },
    {
        "label": "resized_screenshot",
        "kind": 5,
        "importPath": "client.client screenpic",
        "description": "client.client screenpic",
        "peekOfCode": "resized_screenshot = screenshot.resize((new_width, new_height))\nimage_stream = io.BytesIO()\nresized_screenshot.save(image_stream, format='PNG')\nimage_data = image_stream.getvalue()\nclient_socket.send(image_data)\nprint(\"[+] Picture sent to the server.\")\nclient_socket.close()",
        "detail": "client.client screenpic",
        "documentation": {}
    },
    {
        "label": "image_stream",
        "kind": 5,
        "importPath": "client.client screenpic",
        "description": "client.client screenpic",
        "peekOfCode": "image_stream = io.BytesIO()\nresized_screenshot.save(image_stream, format='PNG')\nimage_data = image_stream.getvalue()\nclient_socket.send(image_data)\nprint(\"[+] Picture sent to the server.\")\nclient_socket.close()",
        "detail": "client.client screenpic",
        "documentation": {}
    },
    {
        "label": "image_data",
        "kind": 5,
        "importPath": "client.client screenpic",
        "description": "client.client screenpic",
        "peekOfCode": "image_data = image_stream.getvalue()\nclient_socket.send(image_data)\nprint(\"[+] Picture sent to the server.\")\nclient_socket.close()",
        "detail": "client.client screenpic",
        "documentation": {}
    },
    {
        "label": "SERVER_HOST",
        "kind": 5,
        "importPath": "server.server pic",
        "description": "server.server pic",
        "peekOfCode": "SERVER_HOST = '127.0.0.1'\nSERVER_PORT = 12345\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind((SERVER_HOST, SERVER_PORT))\nserver_socket.listen(5)\nprint(f\"[*] Listening on {SERVER_HOST}:{SERVER_PORT}\")\nclient_socket, client_address = server_socket.accept()\nprint(f\"[*] Accepted connection from {client_address[0]}:{client_address[1]}\")\ntimestamp = time.time()\nwith open(f\"recieved/{timestamp}.png\", \"wb\") as file:",
        "detail": "server.server pic",
        "documentation": {}
    },
    {
        "label": "SERVER_PORT",
        "kind": 5,
        "importPath": "server.server pic",
        "description": "server.server pic",
        "peekOfCode": "SERVER_PORT = 12345\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind((SERVER_HOST, SERVER_PORT))\nserver_socket.listen(5)\nprint(f\"[*] Listening on {SERVER_HOST}:{SERVER_PORT}\")\nclient_socket, client_address = server_socket.accept()\nprint(f\"[*] Accepted connection from {client_address[0]}:{client_address[1]}\")\ntimestamp = time.time()\nwith open(f\"recieved/{timestamp}.png\", \"wb\") as file:\n    while True:",
        "detail": "server.server pic",
        "documentation": {}
    },
    {
        "label": "server_socket",
        "kind": 5,
        "importPath": "server.server pic",
        "description": "server.server pic",
        "peekOfCode": "server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind((SERVER_HOST, SERVER_PORT))\nserver_socket.listen(5)\nprint(f\"[*] Listening on {SERVER_HOST}:{SERVER_PORT}\")\nclient_socket, client_address = server_socket.accept()\nprint(f\"[*] Accepted connection from {client_address[0]}:{client_address[1]}\")\ntimestamp = time.time()\nwith open(f\"recieved/{timestamp}.png\", \"wb\") as file:\n    while True:\n        data = client_socket.recv(1024)",
        "detail": "server.server pic",
        "documentation": {}
    },
    {
        "label": "timestamp",
        "kind": 5,
        "importPath": "server.server pic",
        "description": "server.server pic",
        "peekOfCode": "timestamp = time.time()\nwith open(f\"recieved/{timestamp}.png\", \"wb\") as file:\n    while True:\n        data = client_socket.recv(1024)\n        if not data:\n            break\n        file.write(data)\nprint(\"[+] Picture received and saved.\")\nclient_socket.close()\nserver_socket.close()",
        "detail": "server.server pic",
        "documentation": {}
    },
    {
        "label": "press",
        "kind": 2,
        "importPath": "server.server send key x",
        "description": "server.server send key x",
        "peekOfCode": "def press(button):\n    keyboard.press_and_release(button)\n    time.sleep(0.3)\n# Find the window by its title\nwindow = gw.getWindowsWithTitle(\"Warframe\")[0]\n# Activate the window\nwindow.activate()\n# Get the screen size\nscreen_width, screen_height = pyautogui.size()\n# Calculate the center coordinates",
        "detail": "server.server send key x",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "server.server send key x",
        "description": "server.server send key x",
        "peekOfCode": "window = gw.getWindowsWithTitle(\"Warframe\")[0]\n# Activate the window\nwindow.activate()\n# Get the screen size\nscreen_width, screen_height = pyautogui.size()\n# Calculate the center coordinates\ncenter_x = screen_width // 2\ncenter_y = screen_height // 2\n# Click at the center of the screen\ntime.sleep(1)",
        "detail": "server.server send key x",
        "documentation": {}
    },
    {
        "label": "center_x",
        "kind": 5,
        "importPath": "server.server send key x",
        "description": "server.server send key x",
        "peekOfCode": "center_x = screen_width // 2\ncenter_y = screen_height // 2\n# Click at the center of the screen\ntime.sleep(1)\npyautogui.click(center_x, center_y)\ntime.sleep(10)\npress('t')\npress('x')\nprint(\"done\")",
        "detail": "server.server send key x",
        "documentation": {}
    },
    {
        "label": "center_y",
        "kind": 5,
        "importPath": "server.server send key x",
        "description": "server.server send key x",
        "peekOfCode": "center_y = screen_height // 2\n# Click at the center of the screen\ntime.sleep(1)\npyautogui.click(center_x, center_y)\ntime.sleep(10)\npress('t')\npress('x')\nprint(\"done\")",
        "detail": "server.server send key x",
        "documentation": {}
    },
    {
        "label": "client_socket",
        "kind": 5,
        "importPath": "client",
        "description": "client",
        "peekOfCode": "client_socket = connect_to_server(\"192.168.32.156\", 12345)\n# client_socket = connect_to_server(\"127.0.0.1\", 12345)\nkeys_to_monitor = [\"w\", \"a\", \"s\", \"d\"]\nprevious_states = {key: False for key in keys_to_monitor}\nwhile True:\n    for key in keys_to_monitor:\n        current_state = keyboard.is_pressed(key)\n        if current_state != previous_states[key]:\n            if current_state:\n                message = f\"press:{key}\"",
        "detail": "client",
        "documentation": {}
    },
    {
        "label": "keys_to_monitor",
        "kind": 5,
        "importPath": "client",
        "description": "client",
        "peekOfCode": "keys_to_monitor = [\"w\", \"a\", \"s\", \"d\"]\nprevious_states = {key: False for key in keys_to_monitor}\nwhile True:\n    for key in keys_to_monitor:\n        current_state = keyboard.is_pressed(key)\n        if current_state != previous_states[key]:\n            if current_state:\n                message = f\"press:{key}\"\n                client_socket.send(message.encode('utf-8'))\n            else:",
        "detail": "client",
        "documentation": {}
    },
    {
        "label": "previous_states",
        "kind": 5,
        "importPath": "client",
        "description": "client",
        "peekOfCode": "previous_states = {key: False for key in keys_to_monitor}\nwhile True:\n    for key in keys_to_monitor:\n        current_state = keyboard.is_pressed(key)\n        if current_state != previous_states[key]:\n            if current_state:\n                message = f\"press:{key}\"\n                client_socket.send(message.encode('utf-8'))\n            else:\n                message = f\"release:{key}\"",
        "detail": "client",
        "documentation": {}
    },
    {
        "label": "take_screenshot",
        "kind": 2,
        "importPath": "client_library",
        "description": "client_library",
        "peekOfCode": "def take_screenshot(nameapp, namepic):\n    app_window = pyautogui.getWindowsWithTitle(nameapp)[0]\n    left, top, right, bottom = app_window.left, app_window.top, app_window.right, app_window.bottom\n    screenshot = ImageGrab.grab(bbox=(left, top, right, bottom))\n    new_width = screenshot.width // 2\n    new_height = screenshot.height // 2\n    resized_screenshot = screenshot.resize((new_width, new_height))\n    resized_screenshot.save(namepic)\ndef connect_to_server(ip, port):\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",
        "detail": "client_library",
        "documentation": {}
    },
    {
        "label": "connect_to_server",
        "kind": 2,
        "importPath": "client_library",
        "description": "client_library",
        "peekOfCode": "def connect_to_server(ip, port):\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_address = (ip, port)\n    client_socket.connect(server_address)\n    return client_socket",
        "detail": "client_library",
        "documentation": {}
    },
    {
        "label": "server_socket",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "server_socket = create_server_socket('192.168.32.156', 12345)\n# server_socket = create_server_socket('127.0.0.1', 12345)\nwindow = pygetwindow.getWindowsWithTitle(\"Notepad\")[0]\nwindow.activate()\nscreen_width, screen_height = pyautogui.size()\ncenter_x = screen_width // 2\ncenter_y = screen_height // 2\nclient_socket, client_address = server_socket.accept()\npyautogui.click(center_x, center_y)    \nwhile True:",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "window = pygetwindow.getWindowsWithTitle(\"Notepad\")[0]\nwindow.activate()\nscreen_width, screen_height = pyautogui.size()\ncenter_x = screen_width // 2\ncenter_y = screen_height // 2\nclient_socket, client_address = server_socket.accept()\npyautogui.click(center_x, center_y)    \nwhile True:\n    data = client_socket.recv(1024).decode('utf-8')\n    if not data:",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "center_x",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "center_x = screen_width // 2\ncenter_y = screen_height // 2\nclient_socket, client_address = server_socket.accept()\npyautogui.click(center_x, center_y)    \nwhile True:\n    data = client_socket.recv(1024).decode('utf-8')\n    if not data:\n        break\n    if \"press\" in data:\n        keyboard.press(data.split(\":\")[1])",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "center_y",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "center_y = screen_height // 2\nclient_socket, client_address = server_socket.accept()\npyautogui.click(center_x, center_y)    \nwhile True:\n    data = client_socket.recv(1024).decode('utf-8')\n    if not data:\n        break\n    if \"press\" in data:\n        keyboard.press(data.split(\":\")[1])\n    elif \"release\" in data:",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "create_server_socket",
        "kind": 2,
        "importPath": "server_library",
        "description": "server_library",
        "peekOfCode": "def create_server_socket(host, port):\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((host, port))\n    server_socket.listen(5)\n    return server_socket\ndef press(button):\n    keyboard.press(button)\n    time.sleep(0.3)\ndef release(button):\n    keyboard.release(button)",
        "detail": "server_library",
        "documentation": {}
    },
    {
        "label": "press",
        "kind": 2,
        "importPath": "server_library",
        "description": "server_library",
        "peekOfCode": "def press(button):\n    keyboard.press(button)\n    time.sleep(0.3)\ndef release(button):\n    keyboard.release(button)\n    time.sleep(0.3)",
        "detail": "server_library",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 2,
        "importPath": "server_library",
        "description": "server_library",
        "peekOfCode": "def release(button):\n    keyboard.release(button)\n    time.sleep(0.3)",
        "detail": "server_library",
        "documentation": {}
    }
]